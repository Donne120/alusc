
import { Message } from "@/types/chat";

interface BackendResponse {
  response: string;
  sources?: Array<{
    title: string;
    source: string;
    date?: string;
  }>;
  engine?: string;
}

export const aiService = {
  // Main function to generate responses
  async generateResponse(
    query: string, 
    conversationHistory: Message[] = [], 
    options: { useNyptho?: boolean, personality?: any } = {}
  ): Promise<string> {
    // Check if backend is available
    const backendAvailable = await this.isBackendAvailable();
    
    if (backendAvailable) {
      try {
        return await this.getResponseFromBackend(query, conversationHistory, options);
      } catch (error) {
        console.error("Backend error:", error);
        throw new Error("Could not get response from backend");
      }
    } else {
      console.warn("Backend not available, using fallback");
      return this.getFallbackResponse(query);
    }
  },
  
  // Check if the backend is available
  async isBackendAvailable(): Promise<boolean> {
    try {
      const response = await fetch('http://localhost:8000', {
        method: 'GET',
        headers: { 'Content-Type': 'application/json' },
        signal: AbortSignal.timeout(2000) // 2 second timeout
      });
      
      return response.ok;
    } catch (error) {
      console.warn("Backend check failed:", error);
      return false;
    }
  },
  
  // Get response from the backend
  async getResponseFromBackend(
    query: string, 
    conversationHistory: Message[], 
    options: { useNyptho?: boolean, personality?: any } = {}
  ): Promise<string> {
    // Format conversation history for the backend
    const formattedHistory = conversationHistory.map(msg => ({
      role: msg.isAi ? "assistant" : "user",
      text: msg.text
    }));
    
    // Prepare request options
    const requestOptions = {
      temperature: 0.7,
      ...options
    };
    
    const response = await fetch('http://localhost:8000/generate', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        query,
        conversation_history: formattedHistory,
        role: "student", // Default to student role
        options: requestOptions
      })
    });
    
    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Backend error (${response.status}): ${errorText}`);
    }
    
    const data: BackendResponse = await response.json();
    
    // If there are sources, append them to the response
    if (data.sources && data.sources.length > 0) {
      let responseWithSources = data.response;
      
      responseWithSources += "\n\n**Sources:**\n";
      data.sources.forEach((source, index) => {
        responseWithSources += `${index + 1}. ${source.title} (${source.source})\n`;
      });
      
      // If Nyptho was used, add a note
      if (data.engine === "nyptho") {
        responseWithSources += "\n\n*Response generated by Nyptho learning system*";
      }
      
      return responseWithSources;
    }
    
    // If Nyptho was used but no sources, add a note
    if (data.engine === "nyptho") {
      return data.response + "\n\n*Response generated by Nyptho learning system*";
    }
    
    return data.response;
  },
  
  // Fallback response when backend is not available
  getFallbackResponse(query: string): string {
    return `I'm sorry, but I'm currently unable to connect to the ALU knowledge base. Here's a general response to your query about "${query}".

As an ALU student companion, I typically provide information about courses, campus life, administrative procedures, and academic resources. When our systems are fully operational, I can give you specific information from ALU's knowledge base.

Please try again later when the connection to our backend systems has been restored.`;
  },
  
  // Get Nyptho status
  async getNypthoStatus(): Promise<any> {
    try {
      const response = await fetch('http://localhost:8000/nyptho/status', {
        method: 'GET',
        headers: { 'Content-Type': 'application/json' },
        signal: AbortSignal.timeout(5000)
      });
      
      if (!response.ok) {
        throw new Error(`Backend error (${response.status})`);
      }
      
      return await response.json();
    } catch (error) {
      console.error("Error getting Nyptho status:", error);
      return { error: "Failed to fetch Nyptho status" };
    }
  },
  
  // Update Nyptho personality
  async updateNypthoPersonality(personality: {
    helpfulness: number, 
    creativity: number, 
    precision: number, 
    friendliness: number
  }): Promise<any> {
    try {
      const response = await fetch('http://localhost:8000/nyptho/personality', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(personality)
      });
      
      if (!response.ok) {
        throw new Error(`Backend error (${response.status})`);
      }
      
      return await response.json();
    } catch (error) {
      console.error("Error updating Nyptho personality:", error);
      return { error: "Failed to update Nyptho personality" };
    }
  },
  
  // Get model comparison data
  async getModelComparison(): Promise<any> {
    try {
      const response = await fetch('http://localhost:8000/nyptho/model-comparison', {
        method: 'GET',
        headers: { 'Content-Type': 'application/json' }
      });
      
      if (!response.ok) {
        throw new Error(`Backend error (${response.status})`);
      }
      
      return await response.json();
    } catch (error) {
      console.error("Error getting model comparison:", error);
      return { error: "Failed to fetch model comparison" };
    }
  }
};
